{"ast":null,"code":"import { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nexport default {\n  name: \"PostsContainer\",\n  setup() {\n    const posts = ref([]);\n    async function fetchPosts() {\n      try {\n        const [postsResponse, usersResponse] = await Promise.all([axios.get(\"http://localhost:3000/Posts\"), axios.get(\"http://localhost:3000/Users\")]);\n        const usersMap = usersResponse.data.reduce((acc, user) => {\n          acc[user.id] = user;\n          return acc;\n        }, {});\n        posts.value = postsResponse.data.map(post => ({\n          ...post,\n          user: usersMap[post.user_id]\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    }\n    async function toggleLike(post) {\n      try {\n        const updatedPost = {\n          ...post,\n          liked: !post.liked,\n          likes_count: post.liked ? post.likes_count - 1 : post.likes_count + 1\n        };\n        await axios.put(`http://localhost:3000/Posts/${post.id}`, updatedPost);\n        const index = posts.value.findIndex(p => p.id === post.id);\n        if (index !== -1) {\n          posts.value[index] = {\n            ...updatedPost,\n            user: post.user\n          };\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    }\n    function formatNumber(number) {\n      if (number >= 1000000000) {\n        return (number / 1000000000).toFixed(1) + \"B\";\n      } else if (number >= 1000000) {\n        return (number / 1000000).toFixed(1) + \"M\";\n      } else if (number >= 1000) {\n        return (number / 1000).toFixed(1) + \"K\";\n      }\n      return number;\n    }\n    onMounted(fetchPosts);\n    return {\n      posts,\n      formatNumber,\n      toggleLike\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","name","setup","posts","fetchPosts","postsResponse","usersResponse","Promise","all","get","usersMap","data","reduce","acc","user","id","value","map","post","user_id","error","console","toggleLike","updatedPost","liked","likes_count","put","index","findIndex","p","formatNumber","number","toFixed"],"sources":["/Users/badrnejaa/Desktop/Tweety/src/components/Posts.vue"],"sourcesContent":["<template>\n  <!-- Posts -->\n  <ul class=\"posts\">\n    <li v-for=\"post in posts\" :key=\"post.id\" class=\"flex gap-3\">\n      <img\n        v-if=\"post.user.avatar_url\"\n        class=\"w-14 h-14 rounded-full ml-3\"\n        :src=\"require(`@/${post.user.avatar_url}`)\"\n        alt=\"User Avatar\"\n      />\n\n      <div class=\"w-full h-full\">\n        <div class=\"flex gap-3 mb-2\">\n          <p>{{ post.user ? post.user.name : \"Unknown User\" }}</p>\n          <p>@{{ post.user ? post.user.user_name : \"unknown\" }}</p>\n          <p>. 5h</p>\n        </div>\n\n        <p class=\"w-[70%] mb-4\">\n          {{ post.content }}\n        </p>\n        <img\n          v-if=\"post.image_url\"\n          :src=\"require(`@/${post.image_url}`)\"\n          alt=\"Post Image\"\n          class=\"w-[70%] rounded-3xl border border-[lightgray]\"\n        />\n        <div class=\"w-[40%] post-icns flex justify-between p-5\">\n          <p @click=\"toggleLike(post)\">\n            <img\n              :src=\"\n                post.liked\n                  ? require('../assets/icons/heartLiked.svg')\n                  : require('../assets/icons/heart.svg')\n              \"\n              alt=\"Heart Icon\"\n            />\n            {{ formatNumber(post.likes_count) }}\n          </p>\n          <p>\n            <img src=\"../assets/icons/comments.svg\" alt=\"\" />\n            {{ formatNumber(post.comments_count) }}\n          </p>\n        </div>\n      </div>\n    </li>\n  </ul>\n</template>\n\n<style>\nbody {\n  color: rgb(57, 57, 54);\n}\n\n.post-icns p {\n  display: flex;\n  gap: 8px;\n  cursor: pointer;\n}\n\n.posts li {\n  padding-top: 12px;\n  border-bottom: 1px solid rgb(46, 44, 44);\n}\n</style>\n\n<script>\nimport { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"PostsContainer\",\n  setup() {\n    const posts = ref([]);\n\n    async function fetchPosts() {\n      try {\n        const [postsResponse, usersResponse] = await Promise.all([\n          axios.get(\"http://localhost:3000/Posts\"),\n          axios.get(\"http://localhost:3000/Users\"),\n        ]);\n\n        const usersMap = usersResponse.data.reduce((acc, user) => {\n          acc[user.id] = user;\n          return acc;\n        }, {});\n\n        posts.value = postsResponse.data.map((post) => ({\n          ...post,\n          user: usersMap[post.user_id],\n        }));\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    }\n\n    async function toggleLike(post) {\n      try {\n        const updatedPost = {\n          ...post,\n          liked: !post.liked,\n          likes_count: post.liked ? post.likes_count - 1 : post.likes_count + 1,\n        };\n\n        await axios.put(`http://localhost:3000/Posts/${post.id}`, updatedPost);\n\n        const index = posts.value.findIndex((p) => p.id === post.id);\n        if (index !== -1) {\n          posts.value[index] = { ...updatedPost, user: post.user };\n        }\n      } catch (error) {\n        console.error(\"Error toggling like:\", error);\n      }\n    }\n\n    function formatNumber(number) {\n      if (number >= 1000000000) {\n        return (number / 1000000000).toFixed(1) + \"B\";\n      } else if (number >= 1000000) {\n        return (number / 1000000).toFixed(1) + \"M\";\n      } else if (number >= 1000) {\n        return (number / 1000).toFixed(1) + \"K\";\n      }\n      return number;\n    }\n\n    onMounted(fetchPosts);\n\n    return {\n      posts,\n      formatNumber,\n      toggleLike,\n    };\n  },\n};\n</script>\n"],"mappings":"AAmEA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIL,GAAG,CAAC,EAAE,CAAC;IAErB,eAAeM,UAAUA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAM,CAACC,aAAa,EAAEC,aAAa,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDR,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC,EACxCT,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC,CACzC,CAAC;QAEF,MAAMC,QAAO,GAAIJ,aAAa,CAACK,IAAI,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;UACxDD,GAAG,CAACC,IAAI,CAACC,EAAE,IAAID,IAAI;UACnB,OAAOD,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QAENV,KAAK,CAACa,KAAI,GAAIX,aAAa,CAACM,IAAI,CAACM,GAAG,CAAEC,IAAI,KAAM;UAC9C,GAAGA,IAAI;UACPJ,IAAI,EAAEJ,QAAQ,CAACQ,IAAI,CAACC,OAAO;QAC7B,CAAC,CAAC,CAAC;MACL,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF;IAEA,eAAeE,UAAUA,CAACJ,IAAI,EAAE;MAC9B,IAAI;QACF,MAAMK,WAAU,GAAI;UAClB,GAAGL,IAAI;UACPM,KAAK,EAAE,CAACN,IAAI,CAACM,KAAK;UAClBC,WAAW,EAAEP,IAAI,CAACM,KAAI,GAAIN,IAAI,CAACO,WAAU,GAAI,IAAIP,IAAI,CAACO,WAAU,GAAI;QACtE,CAAC;QAED,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,+BAA+BR,IAAI,CAACH,EAAE,EAAE,EAAEQ,WAAW,CAAC;QAEtE,MAAMI,KAAI,GAAIxB,KAAK,CAACa,KAAK,CAACY,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACd,EAAC,KAAMG,IAAI,CAACH,EAAE,CAAC;QAC5D,IAAIY,KAAI,KAAM,CAAC,CAAC,EAAE;UAChBxB,KAAK,CAACa,KAAK,CAACW,KAAK,IAAI;YAAE,GAAGJ,WAAW;YAAET,IAAI,EAAEI,IAAI,CAACJ;UAAK,CAAC;QAC1D;MACF,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;IAEA,SAASU,YAAYA,CAACC,MAAM,EAAE;MAC5B,IAAIA,MAAK,IAAK,UAAU,EAAE;QACxB,OAAO,CAACA,MAAK,GAAI,UAAU,EAAEC,OAAO,CAAC,CAAC,IAAI,GAAG;MAC/C,OAAO,IAAID,MAAK,IAAK,OAAO,EAAE;QAC5B,OAAO,CAACA,MAAK,GAAI,OAAO,EAAEC,OAAO,CAAC,CAAC,IAAI,GAAG;MAC5C,OAAO,IAAID,MAAK,IAAK,IAAI,EAAE;QACzB,OAAO,CAACA,MAAK,GAAI,IAAI,EAAEC,OAAO,CAAC,CAAC,IAAI,GAAG;MACzC;MACA,OAAOD,MAAM;IACf;IAEAhC,SAAS,CAACK,UAAU,CAAC;IAErB,OAAO;MACLD,KAAK;MACL2B,YAAY;MACZR;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}